Terms:

Set
    - A data structure that will never contain any duplicate values.
    - It can only contain iterables (array being the most common use, but strings work too).
    - A set is an iterable, so it can be spread (unpacked and listed out comma seperated).
    - If you need to manipulate data, or the data order matters, sets are not the best use-case and an array would be better suited
    - CRUD methods on a set? EXPLAIN.
        - .add() -- Also returns the set, so you can chain .add() methods
        - .has(), .delete(), .clear()
    - Useful properties?
        - .size -- similar to .length on an array
    - Converting a set to an array and vice versa?

Map
    - A data structure similar to an object, but keys can be any data type (boolean, object, array, number, etc.)
    - CRUD methods on a map? EXPLAIN.
        - .set(key, value) -- Also returns the map, so you can chain .set() methods
        - .has(), .delete(), .get(), clear()
    - Useful properties?
        - .size -- similar to .length on an array
    - Converting a map to an object and vice versa?

.pop()
    - Deletes the last element in an array AND returns that element's value (can be useful if you just need the value of the last element)

Immutable types vs Mutable types (and assignment)
    - Primitive types are immutable because they are typed by value.
        - You cannot take a primitive and change it's value, you can however, reassign it.
        - If you reassign a primitive, you will simply point to a new address, rather than changing the original one.
    - Objects are mutable because they are typed by reference.
        - You can take an object and change it's value by reassigning it's properties or adding/deleting elements.

Compare by value vs by reference

.slice()
    - Start parameter stays in, end parameter is cut.
        - '0123456789'.slice(1, 8) => // '1234567'
        - '0123456789'.slice(0, -5) => // '01234'
    - If end parameter is omitted, it will take the start parameter and keep everything after
        - '0123456789'.slice(6) => // '6789'
        - '0123456789'.slice(-2) => // '89'

How can strings have methods if they are primitives and not objects?
    - When you invoke any string method (.slice(), .indexOf(), etc.) or even access an index with bracket notation ('thomas'[0]), JavaScript is actually converting the string into an object (new String('string')), and it is on that object that the method is attached and being invoked from. After the execution of the method, it is converted back into a primitive string and returned, because primitives cannot be mutated.

String Methods:
    - indexOf, lastIndexOf, firstIndexOf
    - []
    - replace
    - join, split
    - slice
    - toUpperCase, toLowerCase
    - trim, trimLeft, trimRight
    - padStart, padEnd
    - repeat

Instantiate vs Initialize

Const(ant) vs Read-Only

Default function arguments (and using expressions in them)

First-Class Functions
    - The concept of functions being values, or being treated as first-class citizens.
    - There is no tangible piece of code that is considered a first-class function, it is more an idea or concept of programming languages.

Higher-Order Functions
    - A function that either takes in a function as an argument or returns a function, or both.
    - Higher-order comes from the fact that these functions are at a higher-level of abstraction. They are less concerned with how something happens, more so that it DOES happen. It does not care how the callback might affect or change some piece of data, it simply wants the data to be changes/affected. The actual callback can be seen as a at a lower-level of abstraction.

Callback Functions *

Abstraction (levels of abstraction)

.call, .apply, .bind

Partial Application

IIFE (Immediately Invoked Function Expression)

Data Encapsulation & Data Privacy

Function Execution Context Variable Search Priority
    - First the function will look at it's variable environment
    - If it is not there, it will look into it's closure, if it has one
    - If it's not there it will perform a variable lookup, moving up in scope until it finds the variable

Lookup

Closures
    - Functions do not lose connection to closed-over variable environments of functions they were created in.

Closed-Over Variable Environment

Why don't functions get called when invoked inside of another function? Even if the outer function isn't invoked, the inner still ends with ().
    - Because in the variable environment, JavaScript does not know what is inside a function expression or declaration, only that is IS a function. The moment it is put on the stack it will run through the code and invoke it and it will execute as expected.

Are arguments basically local variables? Local to the function they are passed into, and available in the scope chain for child functions?

Shallow Copy

Throwaway Variable
    - When you need to define parameters that will not be used in order to access a later parameter, they are known as throwaway variables, and proper convention is to define it as _.

Object Methods
    - Object.entries(obj)

Array Methods
    - slice()
    - splice()
    - concat() vs [arr..., arr2...]
    - join()
    - push()
    - unshift()
    - pop()
    - shift()
    - indexOf()
    - includes()
    - entries()

Higher-Order Array Methods
    - ForEach()
      - Executes a callback function for each element in the array (does not return anything).
      - Works on maps and sets
      - In sets, the second parameter also references value, so it is a throwaway variable in place to provide consistency across forEach calls on different data structures

Array constructor function
    - new Array(7) => [<7 empty items>]
      - Only 1 Array constructor function method can be called on an array of empty items, the fill method.
        - fill(1, 3, 4) => [<3 empty items, 1, <3 empty items>]

Ways to programmatically generate an array
    - Loop pushing into an array --- least elegant
    - fill() method onto a new Array function --- works, but not the best
    - from() method on the Array constructor --- most elegant

Methods on Array function vs Array constructor

num++ vs num + 1 vs ++num
    - num++ and num + 1 both do increment the variable, however, the return of num++ is the previous value, while + 1 is an expression resulting in the new value, so trying to log num++ will return num before the incrementation.
    - ++num is the solution to the num++ problem, instead of returning num before the incrementation, the incrementation happens first THEN returns the new value.

Function Body



































































// Function to replace a character in a string at a particular index with a different character
const replaceAt = function (str, index, replacement) {
  const end = str.slice(index);
  const replaced = end.replace(end[0], replacement);
  return str.slice(0, index) + replaced;
};

// Function to convert a string into title case
const titleCase = function (title) {
  const exceptions = [
    'a',
    'is',
    'the',
    'and',
    'as',
    'for',
    'but',
    'if',
    'nor',
    'not',
    'so',
    'yet',
    'an',
    'of',
    'it',
    'on',
    'in',
    'with',
  ];
  return title
    .toLowerCase()
    .split(' ')
    .map((word, i) =>
      i === 0 || !exceptions.includes(word)
        ? word[0].toUpperCase() + word.slice(1)
        : word
    )
    .join(' ');
};
console.log(titleCase('tHE LAST of THE mOhiCAnS'));

// Function to generate a random integer from a passed in min and max
const randomInt = (min, max) =>
  Math.trunc(Math.random() * (max - min + 1) + min);

// Function to check if number is even
const isEven = (num) => !(num % 2);

















    function changeObject(x) {
  x = { member: 'bar' };
  console.log('in changeObject: ' + x.member);
}

function changeMember(x) {
  x.member = 'bar';
  console.log('in changeMember: ' + x.member);
}

var x = { member: 'foo' };

console.log('before changeObject: ' + x.member);
changeObject(x);
console.log('after changeObject: ' + x.member); /* change did not persist */

console.log('before changeMember: ' + x.member);
changeMember(x);
console.log('after changeMember: ' + x.member); /* change persists */














```js
const poll = {
  question: 'What is your favourite programming language?',
  options: ['0: JavaScript', '1: Python', '2: Rust', '3: C++'],
  // This generates [0, 0, 0, 0]. More in the next section ðŸ˜ƒ
  answers: new Array(4).fill(0),
};

// JONAS'S SOLUTION
poll.registerNewAnswer = function () {
  // Get answer
  const answer = Number(
    prompt(
      `${this.question}\n${this.options.join('\n')}\n(Write option number)`
    )
  );
  console.log(answer);
  // Register answer
  typeof answer === 'number' &&
    answer < this.answers.length &&
    this.answers[answer]++;
  this.displayResults();
};

// MY SOLUTION
poll.registerNewAnswer = function () {
  let prompt = '';
  for (const option of this.options) prompt += `\n${option}`;
  // Get answer
  const answer = Number(
    prompt(`${this.question}${prompt}\n(Write option number)`)
  );
  // Register answer
  if (typeof answer === 'number' && answer < this.answers.length)
    this.answers[answer] += 1;
  this.displayResults();
};

// Call the above function on button click
document
  .querySelector('.poll')
  .addEventListener('click', poll.registerNewAnswer.bind(poll));
```

I have a question about my solution to one of the coding challenges: I solved it, but initially I had a problem with the prompt() function. Above is my original solution (along with Jonas's), but I just wanted to ask why mine does not work while Jonas's does. When you run it with my solution, you get "Uncaught TypeError: prompt is not a function" but with Jonas's it works fine. The part that confuses me, is that the part where we both call the prompt() function, it is almost identical, we are simply calling prompt(), passing in a built string (we built it differently, but I don't see why that would matter), and in both cases it's in the same scope.

So, like I said, I did end up making it work, but I want to know why it DIDN'T work initially, because it seems to be being called under the same circumstances as in Jonas's solution.